generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  role           String
  department     String
  lastActive     DateTime?
  riskScore      Float            @default(0)
  communications Communications[]
  financialLogs  FinancialLog[]
  threats        Threat[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Communications {
  id         String   @id @default(uuid())
  employeeId String
  channel    String
  content    String
  timestamp  DateTime

  embeddingJson Json?

  employee  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([employeeId, timestamp])
}

model FinancialLog {
  id              String   @id @default(uuid())
  employeeId      String
  transactionType String
  amount          Float
  notes           String?
  timestamp       DateTime

  employee  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([employeeId, timestamp])
  @@index([transactionType, timestamp])
}

model Threat {
  id              String   @id @default(uuid())
  employeeId      String?
  threatType      String
  description     String
  confidenceScore Float    @default(0.5)
  status          String   @default("open")
  createdAt       DateTime @default(now())

  employee Employee?       @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  reports  WarRoomReport[]

  @@index([employeeId, status, createdAt])
}

model WarRoomReport {
  id             String   @id @default(uuid())
  threatId       String
  generatedAt    DateTime @default(now())
  reportUrl      String?
  recommendation String?

  threat Threat @relation(fields: [threatId], references: [id], onDelete: Cascade)
}
